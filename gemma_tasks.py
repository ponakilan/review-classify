# -*- coding: utf-8 -*-
"""Gemma Tasks

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/gemma-tasks-3a77b60d-0d5f-42a6-b093-b79ecdb7b749.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250201/auto/storage/goog4_request%26X-Goog-Date%3D20250201T104800Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D2e51c74b9be541ac2618abdfa2d110cfb96af5f1ad23ec2790a9a7380309d7b8ab25f2153ed9da7f195fb37f17790d4ac58982039b6dee34e0a1ad94d92661b5457ab9730da2f00237cc89f869d04d5d3da34e1ace3810195a4d4ba65effc8e29296f65faa91c416a1835bd01891d2cdc0f05994a377626e15df93fd6eac04f112d7858cbccb6d729cf8ad7fa58d8abf08b499ad43d4026e9da95f91b5a3e631c63661b7eb1bbe8ec35b4eecf4fd48964f67615ec28e5fbf4bcbb6b5cfbdae596977cc89cb2e06b0000cceac50c60c210cd7e9a8790d8847f7e14863572d320e385c72b0cbc9a237d84ac3e71743aefdb7f3ae7bedd5d30942163760e5bf2b36
"""

# IMPORTANT: SOME KAGGLE DATA SOURCES ARE PRIVATE
# RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES.
import kagglehub
kagglehub.login()

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.

ponakilan_llama_processed_reviews_path = kagglehub.dataset_download('ponakilan/llama-processed-reviews')
ponakilan_processed_json_path = kagglehub.dataset_download('ponakilan/processed-json')
ponakilan_llama_all_path = kagglehub.dataset_download('ponakilan/llama-all')
keras_gemma_keras_gemma_instruct_2b_en_2_path = kagglehub.model_download('keras/gemma/Keras/gemma_instruct_2b_en/2')

print('Data source import complete.')

# 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

from huggingface_hub import login

login(token="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")

import pickle

with open("reviews_llama_iter_2.pkl", "rb") as file:
    data = pickle.load(file)
len(data)

import os

os.environ["KAGGLE_USERNAME"] = "ponakilan"
os.environ["KAGGLE_KEY"] = "1d85627ef8bb7b294779dcdb5735aebf"

os.environ["KERAS_BACKEND"] = "jax"  # Or "tensorflow" or "torch".
os.environ["XLA_PYTHON_CLIENT_MEM_FRACTION"] = "0.9"

import keras_hub

gemma_lm = keras_hub.models.GemmaCausalLM.from_preset("gemma_instruct_2b_en")

gemma_lm.generate("hello")

import tqdm
import json

classify_prompt = """
Please classify the following review into one of the following categories: Positive, Negative, or Neutral.
The output should be strictly in JSON format as shown below:
"sentiment": "<positive/negative/neutral>"
Only curly braces should prefix or sufix the above format. No other characters.

Review: {review}

Strictly follow the json format. JSON format is very very important.
"""

model_response_list = []
for i in tqdm.tqdm(range(len(data))):
    review = data[i]["comment"]
    prompt = classify_prompt.format(review=review)

    try:
        output = gemma_lm.generate(prompt, max_length=1024)
        start_ind = output.find('{')
        model_response = output[start_ind:]
        model_response_list.append(model_response)

        try:
            classification = json.loads(model_response)
            if all(key in classification for key in ['sentiment']):
                data[i]["sentiment_gemma"] = classification["sentiment"].lower()
            else:
                data[i]["sentiment_gemma"] = "Unknown"

        except json.JSONDecodeError:
            print(f"Failed to parse JSON: {output}")
            data[i]["sentiment_gemma"] = "Unknown"

    except Exception as e:
        print(f"Error classifying tweet: {e}")
        data[i]["sentiment_gemma"] = "Unknown"

classify_prompt = """
 Extract the key points from the following review, providing each point as a bullet point in a clear and concise manner.
 Just give the key points like what went wrong or what was good.
 Don't add any extra sentences before or after that. Be
 Review: {review}
 Be very concise. Don't generate the input in the output.
"""

model_response_list = []
for i in tqdm.tqdm(range(len(data))):
    review = data[i]["comment"]
    prompt = classify_prompt.format(review=review)

    try:
        output = gemma_lm.generate(prompt, max_length=1024)
        start_ind = len(prompt)
        model_response = output[start_ind:]
        model_response_list.append(model_response)

        data[i]["key_point_gemma"] = model_response

    except Exception as e:
        print(f"Error classifying tweet: {e}")
        data[i]["key_point_gemma"] = "Unknown"

import pandas as pd

res_df = pd.DataFrame.from_records(data)
res_df

res_df.to_csv("processed_reviews.csv")

"""res_df.columns = ["partial_username", "time_on_medication", "date_posted", "comment", "rating_given", "sentiment_llama", "key_points_llama", "sentiment_gemma", "key_points_gemma"]
res_df.head()

res_df.to_csv("ocrelizumab_reviews_processed.csv", index=False)

import json

files = [
    "/kaggle/input/processed-json/ocrelizumab_reviews_processed.json",
    "/kaggle/input/processed-json/ocrevus_reviews_processed.json"
]

for file in files:
    with open(file, 'rb') as f:
        data = json.load(f)

    df = pd.DataFrame.from_records(data)
    df.to_csv(f"{file[29:]}.csv")

len("/kaggle/input/processed-json/")
"""
